correct_dates
#as.POSIXct(processed_data$`Exit Date`)
processed_data$`Exit Date`
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format="%y-%m-%d")
correct_dates
#as.POSIXct(processed_data$`Exit Date`)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%Y/%m/%d")
correct_dates
#as.POSIXct(processed_data$`Exit Date`)
processed_data <- read_sheet_fte %>% left_join(read_sheet_lookup)
#View(processed_data)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
correct_dates
#as.POSIXct(processed_data$`Exit Date`)
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
convert_dates
#as.POSIXct(processed_data$`Exit Date`)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
convert_dates
#as.POSIXct(processed_data$`Exit Date`)
convert_dates[1]
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
time_diff <- convert_dates - processed_data$`15th Day`
time_diff
#as.POSIXct(processed_data$`Exit Date`)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
time_diff <- convert_dates - processed_data$`15th day`
time_diff
#as.POSIXct(processed_data$`Exit Date`)
class(processed_data$`15th Day``)
)
)
()
djflkds
jfklsd jsdf
s fsdf sd;
class(processed_data$`15th Day`)
class(processed_data$`15th Day`)
class(processed_data$`15th day`)
posxitct_dates <- as.POSIXct(convert_dates)
posxitct_dates <- as.POSIXct(convert_dates)
posxitct_dates
posxitct_dates <- as.POSIXct.date(convert_dates)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.date(convert_dates)
processed_data <- read_sheet_fte %>% left_join(read_sheet_lookup)
#View(processed_data)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.date(convert_dates)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.Date(convert_dates)
posxitct_dates
#time_diff <- convert_dates - processed_data$`15th day`
#time_diff
#as.POSIXct(processed_data$`Exit Date`)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.dates(convert_dates)
class(processed_data$`15th day`)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.dates(convert_dates)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.dates(convert_dates)
class(processed_data$`15th day`)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.dates(convert_dates)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.dates(correct_dates)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct.dates(convert_dates)
class(processed_data$`15th day`)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct(convert_dates)
posxitct_dates
#time_diff <- convert_dates - processed_data$`15th day`
#time_diff
#as.POSIXct(processed_data$`Exit Date`)
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXct(convert_dates, format = "%Y-%m-%d")
posxitct_dates
#time_diff <- convert_dates - processed_data$`15th day`
#time_diff
#as.POSIXct(processed_data$`Exit Date`)
#processed_data %>% mutate(`Student ID`,
`After 9/15` = ifelse((`Exit Date` - `15th day`) > 0), 1, 0)
processed_data %>% mutate(`Student ID`,
`After 9/15` = ifelse((`Exit Date` - `15th day`) > 0), 1, 0)
posxitct_dates <- as.POSIXt(convert_dates, format = "%Y-%m-%d")
posxitct_dates <- as.POSIXlt.date(convert_dates, format = "%Y-%m-%d")
posxitct_dates
convert_dates
time_diff <- convert_dates - processed_data$`15th day`
time_diff
time_diff
#processed_data$`Exit Date`
correct_dates <- as.Date(processed_data$`Exit Date`, format = "%m/%d/%Y")
#correct_dates
convert_dates <- as.Date(correct_dates, format = "%Y-%m-%d")
convert_dates
#"POSIXt"
time_diff <- convert_dates - processed_data$`15th day`
time_diff
#as.POSIXct(processed_data$`Exit Date`)
count(processed_data$`Student ID`)
?count
#processed_data %>% mutate(`Student ID`, `Dupe Check` = )
count(processed_data, `Student ID`)
processed_data %>% mutate(`Student ID`, `Dupe Check` =
count(processed_data, `Student ID`))
processed_data %>% mutate(`Student ID`, `Dupe Check` =
count(`Student ID`))
processed_data %>% mutate(`Student ID`, `Dupe Check` =
count(processed_data, `Student ID`))
processed_data %>% group_by(`Student ID`) %>% mutate(`Dupe Check` = tally())
processed_data %>% group_by(`Student ID`) %>% mutate(`Dupe Check` = tally(`Student ID`))
processed_data %>% group_by(`Student ID`) %>% mutate(`Dupe Check` = tally())
count(processed_data, `Student ID`))
count(processed_data, `Student ID`)
processed_data %>% mutate(`Dupe Check` = count(processed_data, `Student ID`))
#processed_data %>% group_by(`Student ID`) %>% mutate(`Dupe Check` = tally())
#mutate(`Student ID`, `Dupe Check` =
processed_data %>% mutate(`Dupe Check` = count(processed_data, `Student ID`))
count(processed_data, `Student ID`)
mutate(processed_data,
`Dupe Check` = count(processed_data, `Student ID`)
)
# install.packages("reshape")
# install.packages("dplyr")
require("reshape")
require("dplyr")
# getwd()
project.dir <- "C:/Project"
dataset.dir <- "Datasets"
outputs.dir <- "Output"
# setwd(project.dir)
# install.packages("reshape")
# install.packages("dplyr")
require("reshape")
require("dplyr")
# getwd()
project.dir <- "C:/Project"
dataset.dir <- "Datasets"
outputs.dir <- "Output"
# setwd(project.dir)
getwd()
project.dir <- "/Users/fanny/Google Drive/munge/dplyer"
setwd(project.dir)
system.time(mat.test <- matrix(1:1e8, nrow=1e7, ncol=10))
system.time(cbind(new=1:1e7, mat.test))
library(reshape)
require("reshape")
require("dplyr")
install.packages("reshape")
require("reshape")
library(reshape)
str(mtcars)
head(mtcars)
mtcars.melt <- melt(mtcars)
str(mtcars.melt)
head(mtcars.melt)
head(mtcars)
dim(mtcars)  # 32 x 11
dim(mtcars.melt) # 352
# Summary statistics
cast(mtcars.melt, variable ~ ., c(min, max))
cast(mtcars.melt, variable ~ ., c(sd, mean, median))
# Summaries per value of cyl or gear
mtcars.melt <- melt(mtcars, id.vars = c("cyl", "gear"))
# With marginal sums
head(cast(mtcars.melt, variable ~ cyl, margins = TRUE, c(sum, var)) )
# Combined variable levels
head(cast(mtcars.melt, variable ~ cyl + gear, mean))
head(cast(mtcars.melt, cyl + gear ~ variable, mean))
split(iris$Sepal.Length, iris$Species)
lapply(split(iris$Sepal.Length, iris$Species), range)
split(iris$Sepal.Length, iris$Species)
lapply(split(iris$Sepal.Length, iris$Species), range)
head(mpg)
data(mpg)
str(mtcars)
split(mytcars$mpg,mtcars$cyl)
split(my=tcars$mpg,mtcars$cyl)
split(mtcars$mpg,mtcars$cyl)
lapply(split(iris$Sepal.Length, iris$Species), mean)
lapply(split(iris$Sepal.Length, iris$Species), c(mean, range))
lapply(split(iris$Sepal.Length, iris$Species), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, range)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, range)
lapply(split(iris$Sepal.Length, iris$Species), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(split(iris$Sepal.Length, iris$Species), mean)
lapply(split(mtcars$mpg,mtcars$cyl) , mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, range)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, range)
rbind(tapply(mtcars$mpg, mtcars$cyl, mean), tapply(mtcars$mpg, mtcars$cyl, range))
cbind(tapply(mtcars$mpg, mtcars$cyl, mean), tapply(mtcars$mpg, mtcars$cyl, range))
tapply(mtcars$mpg, mtcars$cyl, range)
cbind(tapply(mtcars$mpg, mtcars$cyl, mean), tapply(mtcars$mpg, mtcars$cyl, range))
split(mtcars$mpg,mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, function(x){
mean(x)
range(x)
})
tapply(mtcars$mpg, mtcars$cyl, function(x){
return(mean(x), range(x))
})
tapply(mtcars$mpg, mtcars$cyl, function(x){
return(c(mean(x), range(x))
})
tapply(mtcars$mpg, mtcars$cyl, function(x){
c(mean(x), range(x))
})
tapply(mtcars$mpg, mtcars$cyl, function(x){
c(mean=mean(x), range=range(x))
})
library(dplyr)
set.seed(1234)
sample_frac(iris, size = 0.05)
sample_n(iris, size = 10)
library(assertr)
install.packages("assertr")
library(assertr)
my_directory <- "~/Dropbox/uncommon/YTDAttrition_10092017_automate_cleaning"
setwd(my_directory)
# reads in each sheet
filename <- "YTDAttrition_10092017_Raw_Data.xls"
read_sheet_fte <- read_excel(filename, sheet = "2017-18 FTE as of 10.5")
rm(list=ls())
library(tidyverse)
library(readxl)
library(purrr)
library(assertr)
# reads in each sheet
filename <- "YTDAttrition_10092017_Raw_Data.xls"
read_sheet_fte <- read_excel(filename, sheet = "2017-18 FTE as of 10.5")
read_sheet_attrition <- read_excel(filename, sheet = "Attrition Report")
read_sheet_lookup <- read_excel(filename, sheet = "Lookup Table")
#View(read_sheet_attrition)
#View(read_sheet_fte)
#View(read_sheet_lookup)
Processed_data <- read_sheet_fte %>%
left_join(read_sheet_lookup) %>%
assert(not_na, region, gradespan)
View(read_sheet_fte)
View(read_sheet_lookup)
Processed_data <- read_sheet_fte %>%
left_join(read_sheet_lookup) %>%
assert(not_na, Region, Gradespan)
Processed_data
View(processed_data)
View(Processed_data)
# Selecting columns by name
head(select(airquality, c(Wind, Temp)))
head(select(mtcars, c(cyl, wt)))
# Selecting columns by index
head(select(mtcars, c(1, 2)))
# Excluding columns by name or index
head(select(iris, c(-1,-2)))
head(select(iris, -c(Species, Sepal.Width, Sepal.Length)))
head(select(iris, c(-Species, -Sepal.Width, -Sepal.Length))) # alternative syntax
filter(select(mtcars, c(cyl, wt)), wt > 3 & cyl < 8)
mlb.stat <- read.delim("https://ww2.amstat.org/publications/jse/v18n3/mlb_batting.dat.txt")
head(mlb.stat)
# Hit by pitch average: number of times hit by pitch divided by
# number of appearances at the plate.
mlb.stat <- mutate(mlb.stat, hbpa = hbp / (pa+0.5) )
# For individual columns
summarise(group_by(iris, Species), mean(Petal.Width))
summarise(group_by(mtcars, gear, cyl), min(mpg))
# For all or selected columns, multiple summary functions
summarise_each(group_by(mtcars, gear, cyl), funs(mean))
# With extra summary function arguments
# summarise_each(group_by(mtcars, gear, cyl), funs(mean(., na.rm=TRUE)))
# Previous method:
filter(select(mtcars, c(cyl, wt)), wt > 3 & cyl < 8)
# Chaining syntax:
mtcars %>%
select(c(cyl, wt)) %>%
filter(wt > 3 & cyl < 8)
stuff %>%
group_by(mpg,cyl) %>%
summarise(avg=mean(mpg), range=range(mpg))
stuff %>%
group_by(mpg,cyl)
mtcars %>%
group_by(mpg,cyl)
mtcars
mtcars %>%
group_by(mpg,cyl
mtcars %>%
mtcars
stuff %>%
group_by(mtcars,cyl) %
stuff %>%
group_by(mtcars,cyl) %>%
summarise(avg=mean(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(avg=mean(mpg))
?summarise_all
mtcars %>%
group_by(cyl) %>%
summarise(avg=mean(mpg), range = range(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(avg=mean(mpg), range=range(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(avg=mean(mpg))
sessionInfo()
mtcars %>%
group_by(cyl) %>%
summarise(avg=mean(mpg)) %>%
summarise(range=range(mpg))
?summarize
summarize
?summarize
?summarise_at
mtcars %>%
group_by(cyl) %>%
summarise_all(c(avg=mean(mpg),range=range(mpg))
#%>%
#summarise(avg=mean(mpg), range=range(mpg))
sessionInfo()
rm(list=ls())
library(tidyverse)
library(readxl)
library(purrr)
library(data.table)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(purrr)
library(data.table)
setwd("~/Google Drive/db/usTransportation/data")
getwd()
my_directory <- "/Users/fanny/Google Drive/db/usTransportation/data"
setwd(my_directory)
setwd(my_directory)
files <- list.files(my_directory, pattern="*.csv", full.names=TRUE)
files
read_county_files <- function(filename){
x <- freads(filename, sheet="SQL Results", skip=1)
# cleaning up the path, replace with blank -> returns filename.xls
#x <- mutate(x, Filename=sub("../../../Source/PARCC Comps/", "", filename))
return(x)
}
combined <- map_df(files, read_county_files)
read_county_files <- function(filename){
x <- fread(filename, sheet="SQL Results", skip=1)
# cleaning up the path, replace with blank -> returns filename.xls
#x <- mutate(x, Filename=sub("../../../Source/PARCC Comps/", "", filename))
return(x)
}
combined <- map_df(files, read_county_files)
read_county_files <- function(filename){
x <- fread(filename, skip=1)
# cleaning up the path, replace with blank -> returns filename.xls
#x <- mutate(x, Filename=sub("../../../Source/PARCC Comps/", "", filename))
return(x)
}
combined <- map_df(files, read_county_files)
View(combined)
read_county_files <- function(filename){
x <- fread(filename, skip=0)
# cleaning up the path, replace with blank -> returns filename.xls
#x <- mutate(x, Filename=sub("../../../Source/PARCC Comps/", "", filename))
return(x)
}
combined <- map_df(files, read_county_files)
View(combined)
View(combined)
?starts_with
processed_frame <- combined %>%
select(starts_with("HC01"))
View(processed_frame)
View(combined)
processed_frame <- combined %>%
select(starts_with(c("GEO.", "HC01"))
View(processed_frame)
keep_variables <- c("GEO", "HC01")
processed_frame <- combined %>%
select(starts_with(one_of(keep_variables))
View(processed_frame)
keep_variables <- c("GEO", "HC01")
processed_frame <- combined %>%
select((starts_with(one_of(keep_variables))
View(processed_frame)
keep_variables <- c("GEO", "HC01")
processed_frame <- combined %>%
select(one_of(keep_variables))
View(processed_frame)
keep_variables <- c("GEO", "HC01")
processed_frame <- combined %>%
select(-starts_with("HC02"))
View(processed_frame)
#keep_variables <- c("GEO", "HC01")
processed_frame <- combined %>%
select(-starts_with("HC02")) %>%
select(-starts_with("HC03"))
View(processed_frame)
rm(list=ls())
library(tidyverse)
library(purrr)
library(data.table)
my_directory <- "/Users/fanny/Google Drive/db/usTransportation/data"
setwd(my_directory)
files <- list.files(my_directory, pattern="*.csv", full.names=TRUE)
#files
read_county_files <- function(filename){
x <- fread(filename, skip=0)
return(x)
}
combined <- map_df(files, read_county_files)
read_county_files <- function(filename){
x <- fread(filename, skip=0)
return(x)
}
combined <- map_df(files, read_county_files)
files <- list.files(my_directory, pattern="*.csv", full.names=TRUE)
files
files <- list.files(my_directory, pattern="*.csv", full.names=TRUE)
files
read_county_files <- function(filename){
x <- fread(filename, skip=0)
return(x)
}
combined <- map_df(files, read_county_files)
files <- list.files(my_directory, pattern="*.csv", full.names=TRUE)
files
read_county_files <- function(filename){
x <- fread(filename, skip=0)
return(x)
}
combined <- map_df(files, read_county_files)
#keep_variables <- c("GEO", "HC01")
processed_frame <- combined %>%
select(-starts_with("HC02")) %>%
select(-starts_with("HC03"))
#keep_variables <- c("GEO", "HC01")
processed_frame <- combined %>%
select(-starts_with("HC02")) %>%
select(-starts_with("HC03"))
files <- list.files(my_directory, pattern="*.csv", full.names=TRUE)
files
read_county_files <- function(filename){
x <- fread(filename, skip=0)
return(x)
}
combined <- map_df(files, read_county_files)
my_directory <- "/Users/fanny/Google Drive/db/usTransportation/data"
setwd(my_directory)
files <- list.files(my_directory, pattern="*.csv", full.names=TRUE)
files
read_county_files <- function(filename){
x <- fread(filename, skip=0)
return(x)
}
combined <- map_df(files, read_county_files)
